# Generated by Django 2.2.5 on 2019-09-19 13:06

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MeasureUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('base', models.CharField(choices=[('g', 'g'), ('ml', 'ml')], default='g', max_length=128)),
                ('factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MicroNutrient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('rda', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='rda (mg)')),
                ('rda_max', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='rda max (mg)')),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MicroNutrientClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('value_for', models.CharField(choices=[('100 g', '100 g'), ('100 ml', '100 ml')], default='100 g', max_length=128)),
                ('high_processed', models.BooleanField(default=False)),
                ('kcal', models.PositiveIntegerField()),
                ('fat', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('saturated_fat', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('carbohydrate', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('sugar', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('added_sugar', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('protein', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('alcohol', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('salt', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='salt (g)')),
                ('sodium', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='sodium (g)')),
                ('potassium', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='potassium (g)')),
                ('fiber', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='fiber (g)')),
                ('water', models.FloatField(blank=True, default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='water (ml)')),
            ],
            options={
                'ordering': ['name', 'vendor'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('final_weight', models.PositiveIntegerField(default=0)),
                ('total_weight', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UsdaNndFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usda_id', models.CharField(max_length=1024)),
                ('long_description', models.CharField(max_length=1024)),
                ('short_description', models.CharField(max_length=1024)),
                ('common_name', models.CharField(max_length=1024)),
                ('manufacturer_name', models.CharField(max_length=1024)),
                ('survey', models.BooleanField()),
                ('refuse_desc', models.CharField(max_length=1024)),
                ('refuse_perc', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('scientific_name', models.CharField(max_length=1024)),
                ('nitrogen_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('protein_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('fat_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('carbohydrate_factor', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='UsdaNndFoodGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('usda_id', models.CharField(max_length=1024)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UsdaNndLangual',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usda_id', models.CharField(max_length=1024)),
                ('description', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WeightDiaryEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='weight (kg)')),
                ('base', models.FloatField(editable=False)),
                ('need', models.FloatField(editable=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UsdaNndFoodLangualRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.UsdaNndFood')),
                ('langual', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.UsdaNndLangual')),
            ],
        ),
        migrations.AddField(
            model_name='usdanndfood',
            name='food_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.UsdaNndFoodGroup'),
        ),
        migrations.CreateModel(
            name='RecipeProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('measure_unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.MeasureUnit')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.Product')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.Recipe')),
            ],
        ),
        migrations.CreateModel(
            name='ProductMicroNutrient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='quantity (mg)')),
                ('micro_nutrient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.MicroNutrient')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.Product')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.ProductCategory'),
        ),
        migrations.AddField(
            model_name='product',
            name='micro_nutrients',
            field=models.ManyToManyField(blank=True, through='foods.ProductMicroNutrient', to='foods.MicroNutrient'),
        ),
        migrations.AddField(
            model_name='product',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.Vendor'),
        ),
        migrations.AddField(
            model_name='micronutrient',
            name='nutrient_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.MicroNutrientClass'),
        ),
        migrations.CreateModel(
            name='FrequentDiaryEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('measure_unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.MeasureUnit')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.Product')),
            ],
        ),
        migrations.CreateModel(
            name='FoodDiaryEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('kcal', models.FloatField(editable=False)),
                ('fat', models.FloatField(editable=False)),
                ('saturated_fat', models.FloatField(editable=False)),
                ('carbohydrate', models.FloatField(editable=False)),
                ('sugar', models.FloatField(editable=False)),
                ('protein', models.FloatField(editable=False)),
                ('alcohol', models.FloatField(editable=False)),
                ('added_sugar', models.FloatField(editable=False)),
                ('salt', models.FloatField(editable=False)),
                ('sodium', models.FloatField(editable=False)),
                ('potassium', models.FloatField(editable=False)),
                ('fiber', models.FloatField(editable=False)),
                ('water', models.FloatField(editable=False)),
                ('future', models.BooleanField(default=False)),
                ('measure_unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.MeasureUnit')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='foods.Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['time'],
            },
        ),
    ]
