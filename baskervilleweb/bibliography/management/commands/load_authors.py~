#! /usr/bin/python
# -*- coding: utf-8 -*-

import re,time,datetime

from django.core.management.base import BaseCommand, CommandError
from django.core.exceptions import ObjectDoesNotExist
from django.conf import settings
import django.core.files
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType


from gianozia_pages.models import Menu,PageMenuRelation,Page,Scheda,SchedaValue,SchedaKey
from base.models import Version

class Command(BaseCommand):
    args = '<file_elenco> <dir_pagine> <user_owner>'
    help = 'Load pages'

    def handle(self, *args, **options):
        elenco=args[0]
        dname=args[1]
        uname=args[2]
        user=User.objects.get(username=uname)
        lista=[]
        obj={}
        fd=open(elenco,"r")
        for l in fd.readlines():
            l=unicode(l,'utf-8')
            l=l.strip()
            if not l: continue
            if l=="=":
                if obj:
                    lista.append(obj)
                    obj={}
                    continue
            t=l.split(":")
            if t[0] not in ["scheda","menu","toc","created","last_modified"]:
                obj[t[0]]=":".join(t[1:])
                continue
            if t[0] in ["created","last_modified"]:
                obj[t[0]]=int(t[1])
                continue
            if t[0] == "toc":
                obj[t[0]]=bool(int(t[1]))
                continue
            if t[0] == "menu":
                if not obj.has_key("menu"): obj["menu"]=[]
                obj["menu"].append(t[1])
                continue
            if not obj.has_key("scheda"): obj["scheda"]=[]
            obj["scheda"].append((t[1],t[2:]))
        fd.close()
        if obj:
            lista.append(obj)

        for obj in lista:
            obj["fname"]=dname+"/"+obj["name"]
            fd=open(obj["fname"],"r")
            obj["text"]=fd.read()
            fd.close()


        for obj in lista:
            page,created=Page.objects.get_or_create(name=obj["name"],
                                                    defaults={"title": obj["title"],"has_toc": obj["toc"]})
            if obj.has_key("menu"):
                n=1
                for m in obj["menu"]:
                    menu=Menu.objects.get(name=m)
                    rel,created=PageMenuRelation.objects.get_or_create(pos=n,page=page,menu=menu)
                    n+=1
            if obj.has_key("scheda"):
                scheda,created=Scheda.objects.get_or_create(name=page.name+" (scheda)",page=page)
                for key,value in obj["scheda"]:
                    skey,created=SchedaKey.objects.get_or_create(name=key)
                    sval,created=SchedaValue.objects.get_or_create(key=skey,scheda=scheda,value=value)
            
            version,created=Version.objects.get_or_create(object_id=page.id,
                                                          content_type=ContentType.objects.get_for_model(Page),
                                                          defaults={"text": obj["text"],
                                                                    "created_by": user,
                                                                    "modified_by": user,
                                                                    "created": datetime.datetime.fromtimestamp(obj["created"]/1000000),
                                                                    "last_modified": datetime.datetime.fromtimestamp(obj["last_modified"]/1000000)})
            version.save()
